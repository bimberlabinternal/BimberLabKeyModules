import org.labkey.gradle.util.BuildUtils;
import org.labkey.gradle.util.ExternalDependency

configurations.all {
    resolutionStrategy {
        // NOTE: this should be kept in sync with SequenceAnalysis module
        force "jakarta.xml.bind:jakarta.xml.bind-api:2.3.3"
    }
}

dependencies {
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:DiscvrLabKeyModules:jbrowse", depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:DiscvrLabKeyModules:SequenceAnalysis", depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:laboratory", depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:dataintegration", depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:ehrModules:ehr", depProjectConfig: "apiJarFile")
    BuildUtils.addExternalDependency(
            project,
            new ExternalDependency(
                    "com.github.samtools:htsjdk:${htsjdkVersion}",
                    'htsjdk',
                    'htsjdk',
                    'http://samtools.github.io/htsjdk/',
                    ExternalDependency.MIT_LICENSE_NAME,
                    ExternalDependency.MIT_LICENSE_URL,
                    'A Java API for high-throughput sequencing data (HTS) formats'
            )
    )
    implementation "net.sf.opencsv:opencsv:${opencsvVersion}"

    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:dataintegration", depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:DiscvrLabKeyModules:SequenceAnalysis", depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:LabDevKitModules:laboratory", depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:ehrModules:ehr", depProjectConfig: 'published', depExtension: 'module')

    BuildUtils.addExternalDependency(
            project,
            new ExternalDependency(
                    "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
                    "jackson-databind",
                    "jackson-databind",
                    "https://github.com/FasterXML/jackson-databind",
                    ExternalDependency.APACHE_2_LICENSE_NAME,
                    ExternalDependency.APACHE_2_LICENSE_URL,
                    "Parsing XML Data"
            )
    )
    BuildUtils.addExternalDependency(
            project,
            new ExternalDependency(
                    "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}",
                    "jackson-dataformat-xml",
                    "jackson-dataformat-xml",
                    "https://github.com/FasterXML/jackson-dataformat-xml",
                    ExternalDependency.APACHE_2_LICENSE_NAME,
                    ExternalDependency.APACHE_2_LICENSE_URL,
                    "Parsing XML Data"
            ),
            {
                exclude group: 'jakarta.activation', module: 'jakarta.activation-api'
            }
    )
}
